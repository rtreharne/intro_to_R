gradVal <- c()
for (file in files) {
fit <- getGradient(file)
print(as.numeric(fit[2]))
gradVal <- c(gradVal, as.numeric(fit[2]))
}
files[which.max(gradVal)]
dir = "/lots_of_elephants/"
files <- list.files(dir)
dir = "lots_of_elephants/"
files <- list.files(dir)
dir = "./lots_of_elephants/"
files <- list.files(dir)
files <- list.files(.)
files <- list.files()
files
dir = "week_9/"
files <- list.files()
files <- list.files(dir)
dir = "week_9/9_1_too_many_elephants"
files <- list.files(dir)
getwd()
dir = "week_9/9_1_too_many_elephants/lots_of_elephants/"
files <- list.files(dir)
getGradient <- function(fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(time_months ~ weight_kg, data = df)
return(c(fname, fit$coeff[2]))
}
gradVal <- c()
for (file in files) {
fit <- getGradient(file)
print(as.numeric(fit[2]))
gradVal <- c(gradVal, as.numeric(fit[2]))
}
files[which.max(gradVal)]
max(gradVal)
which.max(gradVal)
files[which.max(gradVal)]
fit <- lm(weight_kg ~ time_month, data = df)
fit <- lm(weight_kg ~ time_montha, data = df)
getGradient <- function(fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_montha, data = df)
return(c(fname, fit$coeff[2]))
}
gradVal <- c()
for (file in files) {
fit <- getGradient(file)
print(as.numeric(fit[2]))
gradVal <- c(gradVal, as.numeric(fit[2]))
}
getGradient <- function(fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_months, data = df)
return(c(fname, fit$coeff[2]))
}
gradVal <- c()
for (file in files) {
fit <- getGradient(file)
print(as.numeric(fit[2]))
gradVal <- c(gradVal, as.numeric(fit[2]))
}
max(gradVal)
which.max(gradVal)
files[which.max(gradVal)]
getGradient(dir, "elephant_100822")
getGradient <- function(dir, fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_months, data = df)
return(c(fname, fit$coeff[2]))
}
getGradient(dir, "elephant_100822")
getGradient <- function(dir, fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_months, data = df)
return(c(fname, as.numeric(fit$coeff[2])))
}
getGradient(dir, "elephant_100822")
for (file in files) {
fit <- getGradient(file)
print(as.numeric(fit[2]))
gradVal <- c(gradVal, fit)
}
fit <- getGradient(dir, file)
for (file in files) {
fit <- getGradient(dir, file)
print(as.numeric(fit[2]))
gradVal <- c(gradVal, fit)
}
for (file in files) {
fit <- getGradient(dir, file)
gradVal <- c(gradVal, fit)
}
for (file in files) {
fit <- getGradient(dir, file)
gradVal <- c(gradVal, fit)
}
max(gradVal)
which.max(gradVal)
gradVal
getGradient <- function(dir, fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_months, data = df)
return(c(fname, fit$coeff[2]))
}
getGradient <- function(dir, fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_months, data = df)
return(c(fname, as.numeric(fit$coeff[2])))
}
getGradient <- function(dir, fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_months, data = df)
return(c(fname, as.numeric(fit$coeff[2]))
}
for (file in files) {
fileGrad <- getGradient(dir, file)
gradVal <- c(gradVal, as.numeric(fileGrad[2]))
}
getGradient <- function(dir, fname){
path = sprintf("%s%s", dir, fname)
df <- read.csv(path)
fit <- lm(weight_kg ~ time_months, data = df)
return(c(fname, fit$coeff[2]))
}
getGradient(dir, "elephant_100822")
gradVal <- c()
for (file in files) {
fileGrad <- getGradient(dir, file)
gradVal <- c(gradVal, as.numeric(fileGrad[2]))
}
max(gradVal)
which.max(gradVal)
files[which.max(gradVal)]
gradVal
source('~/Documents/intro_to_R/week_9/9_1_too_many_elephants/too_many_elephants.R', echo=TRUE)
getGradient <- function(dir, fname){
# construct the path that tells us where the data file is
# e.g. "week_9/9_1_too_many_elephants/lots_of elephants/elephant_100822"
path = sprintf("%s%s", dir, fname)
df <- read.csv(path) # read the data file like you did in last week's workshop
fit <- lm(weight_kg ~ time_months, data = df) # create a linear model
return(it$coeff[2] # return the filename and gradient as a vector, i.e. (fname, gradient)
}
getGradient <- function(dir, fname){
# construct the path that tells us where the data file is
# e.g. "week_9/9_1_too_many_elephants/lots_of elephants/elephant_100822"
path = sprintf("%s%s", dir, fname)
df <- read.csv(path) # read the data file like you did in last week's workshop
fit <- lm(weight_kg ~ time_months, data = df) # create a linear model
return(fit$coeff[2]) # return the filename and gradient as a vector, i.e. (fname, gradient)
}
getGradient(dir, "elephant_100822")
source('~/Documents/intro_to_R/week_9/9_1_too_many_elephants/too_many_elephants.R', echo=TRUE)
source('~/Documents/intro_to_R/week_9/9_1_too_many_elephants/too_many_elephants.R', echo=TRUE)
source('~/Documents/intro_to_R/week_9/9_1_too_many_elephants/too_many_elephants.R', echo=TRUE)
source('~/Documents/intro_to_R/week_9/9_1_too_many_elephants/too_many_elephants.R', echo=TRUE)
source('~/Documents/intro_to_R/week_9/9_1_too_many_elephants/too_many_elephants.R', echo=TRUE)
dir = "week_9/9_1_too_many_elephants/lots_of_elephants/"
files <- list.files(dir)
getGradient <- function(dir, fname){
# construct the path that tells us where the data file is
# e.g. "week_9/9_1_too_many_elephants/lots_of elephants/elephant_100822"
path = sprintf("%s%s", dir, fname)
df <- read.csv(path) # read the data file like you did in last week's workshop
fit <- lm(weight_kg ~ time_months, data = df) # create a linear model
return(fit$coeff[2]) # return the filename and gradient as a vector, i.e. (fname, gradient)
}
getGradient(dir, "elephant_100822")
gradVals <- c()
for (file in files) {
fileGrad <- getGradient(dir, file) # for each file call the "getGradient" gradient function
gradVals <- c(gradVals, as.numeric(fileGrad[2])) # add the calculate gradient to the gradVal vector
}
max(gradVals) # tells us the maximum gradient
for (file in files) {
fileGrad <- getGradient(dir, file) # for each file call the "getGradient" gradient function
gradVals <- c(gradVals, fileGrad) # add the calculate gradient to the gradVal vector
}
gradVals <- c()
getGradient(dir, "elephant_100822")
for (file in files) {
fileGrad <- getGradient(dir, file) # for each file call the "getGradient" gradient function
gradVals <- c(gradVals, fileGrad) # add the calculate gradient to the gradVal vector
}
max(gradVals) # tells us the maximum gradient
which.max(gradVals) # tells us the index of the maximum value
dir = "week_9/9_1_too_many_elephants/lots_of_elephants/"
files <- list.files(dir)
getGradient <- function(dir, fname){
# construct the path that tells us where the data file is
# e.g. "week_9/9_1_too_many_elephants/lots_of elephants/elephant_100822"
path = sprintf("%s%s", dir, fname)
df <- read.csv(path) # read the data file like you did in last week's workshop
fit <- lm(weight_kg ~ time_months, data = df) # create a linear model
return(fit$coeff[2]) # return the filename and gradient as a vector, i.e. (fname, gradient)
}
getGradient(dir, "elephant_100822")
gradVals <- c()
for (file in files) {
fileGrad <- getGradient(dir, file) # for each file call the "getGradient" gradient function
gradVals <- c(gradVals, fileGrad) # add the calculate gradient to the gradVal vector
}
max(gradVals) # tells us the maximum gradient
which.max(gradVals) # tells us the index of the maximum value
files[which.max(gradVals)]
source('~/Documents/intro_to_R/week_9/9_1_too_many_elephants/too_many_elephants.R', echo=TRUE)
source('~/Documents/intro_to_R/liverpool_everton.R', echo=TRUE)
source('~/Documents/intro_to_R/liverpool_everton.R', echo=TRUE)
source('~/Documents/intro_to_R/liverpool_everton.R', echo=TRUE)
des <- describeBy(fanHeights, fanHeights$Team)
write.table(describeBy(fanHeights, fanHeights$Team)[1], "week_9/fan_heights.csv")
boxplot(Height_cm~Team,
data = fanHeights,
ylab = "Height (cm)")
mysample <- fanHeights[sample(1:nrow(fanHeights), 50]
mysample <- fanHeights[sample(1:nrow(fanHeights), 50,]
mysample <- fanHeights[sample(1:nrow(fanHeights),
50)]
mysample <- fanHeights[sample(nrow(fanHeights), 50), ]
boxplot(Height_cm~Team,
data = mysample,
ylab = "Height (cm)")
mysample <- fanHeights[sample(nrow(fanHeights), 500), ]
source('~/Documents/intro_to_R/liverpool_everton.R', echo=TRUE)
descrieBy(fanHeights, Team)
describeBy(fanHeights, Team)
describeBy(mysmple, Team)
describeBy(mysample, Team)
describeBy(mysample, mysample$Team)
mysample <- fanHeights[sample(nrow(fanHeights), 10), ]
describeBy(mysample, mysample$Team)
help(describe)
fanHeights <- read.csv("week_9/9_2_liverpool_everton/fan_data.csv")
summary(fanHeights)
library(psych)
describe(fanHeights)
describe(fanHeights)
des <- describeBy(fanHeights, fanHeights$Team)
describeBy(fanHeights, fanHeights$Team)
describe(fanHeights)
describeBy(mysample, mysample$Team)
describe(fanHeights)
mysample <- fanHeights[sample(nrow(fanHeights), 50), ]
describeBy(mysample, mysample$Team)
hist(fanHeights$Height_cm)
hist(fanHeights$Height_cm,
main="Histogram of fan heights from a Liverpool Vs Everton match",
xlab="Height (cm)")
hist(fanHeights$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
hist(fanHeights$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
boxplot(Height_cm~Team,
data = mysample,
ylab = "Height (cm)")
boxplot(Height_cm~Team,
data = fanHeights,
ylab = "Height (cm)")
hist(mysample$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(mysample$Height_cm),
sd(mysample$Height_cm)),
col="purple")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
boxplot(Height_cm~Team,
data = fanHeights,
ylab = "Height (cm)")
hist(mysample$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
hist(fanHeights$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
filter(fanHeights$Team == "Liverpool")
filter(fanHeights.team == "Liverpool")
fanHeights[which(fanHeights$Team == "Liverpol")]
liverpool <- fanHeights[which(fanHeights$Team == "Liverpol")]
View(liverpool)
View(liverpool)
View(fanHeights)
View(fanHeights)
liverpool <- fanHeights[which(fanHeights$Team == "Liverpool")]
liverpool <- fanHeights[which(fanHeights$Team == "Liverpool")]
fanHeights <- read.csv("week_9/9_2_liverpool_everton/fan_data.csv")
library(psych)
describe(fanHeights)
describeBy(fanHeights, fanHeights$Team)
mysample <- fanHeights[sample(nrow(fanHeights), 50), ]
describeBy(mysample, mysample$Team)
hist(fanHeights$Height_cm,
main="Histogram of fan heights from a Liverpool Vs Everton match",
xlab="Height (cm)")
hist(fanHeights$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
liverpool <- fanHeights[which(fanHeights$Team == "Liverpool")]
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
boxplot(Height_cm~Team,
data = fanHeights,
ylab = "Height (cm)")
liverpool <- fanHeights[which(fanHeights$Team == "Liverpool"),]
everton <- fanHeights[which(fanHeights$Team == "Everton"),]
hist(fanHeights$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(Liverpool$Height_cm),
sd(Liverpool$Height_cm)),
col="red")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(liverpool$Height_cm),
sd(liverpool$Height_cm)),
col="red")
hist(fanHeights$Height_cm,
freq = F,
main = "Height of a sample (N=2000) of fans from Liverpool vs Everton Match",
xlab = "Height (cm)")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(liverpool$Height_cm),
sd(liverpool$Height_cm)),
col="red")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(everton$Height_cm),
sd(everton$Height_cm)),
col="red")
lines(seq(100, 240, by=1),
dnorm(seq(100, 240, by=1),
mean(fanHeights$Height_cm),
sd(fanHeights$Height_cm)),
col="purple")
boxplot(Height_cm~Team,
data = fanHeights,
ylab = "Height (cm)")
boxplot(Height_cm~Team,
data = fanHeights,
ylab = "Height (cm)")
boxplot(Height_cm~Team,
data = fanHeights,
ylab = "Height (cm)",
main="Box plots of Everton Vs Liverpool fans.")
source('~/Documents/intro_to_R/liverpool_everton.R', echo=TRUE)
everton <- fanHeights[which(fanHeights$Team == "Everton"),]$Height_cm
liverpool <- fanHeights[which(fanHeights$Team == "Liverpool"),]$Height_cm
t.test(liverpool, everton)
t.test(liverpool, everton)
t.test(liverpool, everton)
t.test(liverpool, everton)
source('~/Documents/intro_to_R/week_9/9_2_liverpool_everton/liverpool_everton.R', echo=TRUE)
df = read.csv("data.csv")
df = read.csv("data.csv")
df = read.csv("data.csv")
df = read.csv("data.csv")
df = read.csv("week_9/9_3_cancer/data.csv")
View(df)
View(df)
attach(df)
hist(diagnosis)
hist(radius_mean)
plot(radius_mean, smoothness_mean)
plot(smoothness_mean, compactness_mean)
plot(smoothness_mean, compactness_mean, log="xy")
View(df)
View(df)
malignant <- df[which(df$diagnosis == "M"),]
plot(malignant$smoothness_mean, malignant$compactness_mean, log="xy")
benign <- df[which(df$diagnosis == "B"),]
plot(benign$smoothness_mean, benign$compactness_mean, log="xy")
points(benign$smoothness_mean, benign$compactness_mean, log="xy")
plot(malignant$smoothness_mean, malignant$compactness_mean, log="xy")
points(benign$smoothness_mean, benign$compactness_mean, log="xy")
plot(malignant$smoothness_mean, malignant$compactness_mean, log="xy", col="red")
points(benign$smoothness_mean, benign$compactness_mean, log="xy", col="green")
plot(malignant$fractal_dimension_mean, malignant$compactness_mean, log="xy", col="red")
points(benign$fractal_dimension_mean, benign$compactness_mean, log="xy", col="green")
plot(malignant$fractal_dimension_mean, malignant$radius_mean, log="xy", col="red")
points(benign$fractal_dimension_mean, benign$radius_mean, log="xy", col="green")
plot(malignant$fractal_dimension_mean, malignant$radius_mean, col="red")
points(benign$fractal_dimension_mean, benign$radius_mean, col="green")
plot(malignant$fractal_dimension_mean, malignant$area_mean, col="red")
points(benign$fractal_dimension_mean, benign$area_mean, col="green")
boxplot(diagnosis~area_mean, data = df)
boxplot(area_mean~diagnosis, data = df)
hist(malignant$area_mean)
hist(benign$area_mean)
t.test(malignant$area_mean, benign$area_mean)
include(psych)
library(psych)
describeBy(df, df$diagnosis)
library(xlsx)
write.csv(describeBy(malignant), "malignant_summary.csv")
write.csv(describeBy(df$diagnosis)[1], "malignant_summary.csv")
describeBy(df, df$diagnosis)
write.csv(ddescribeBy(df, df$diagnosis)[1], "malignant_summary.csv")
write.csv(describeBy(df, df$diagnosis)[1], "malignant_summary.csv")
plot(malignant$fractal_dimension_mean, malignant$area_mean, col="red")
points(benign$fractal_dimension_mean, benign$area_mean, col="green")
plot(malignant$area_mean, malignant$area_mean, col="red")
points(benign$area_mean, benign$area_mean, col="green")
points(benign$area_mean, benign$fractal_dimension_mean, col="green")
plot(malignant$area_mean, malignant$fractal_dimension_mean, col="red")
points(benign$area_mean, benign$fractal_dimension_mean, col="green")
plot(malignant$area_mean, malignant$fractal_dimension_mean, col="red")
points(benign$area_mean, benign$fractal_dimension_mean, col="green")
legend(2000, 0.09, c("Malignant", "Benign"))
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"))
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"),
pch=10)
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"),
pch=10,
fill=none)
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"),
pch=10,
fill=None)
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"),
pch=1)
plot(malignant$area_mean, malignant$fractal_dimension_mean, col="red")
points(benign$area_mean, benign$fractal_dimension_mean, col="green")
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"),
pch=1)
plot(malignant$area_mean, malignant$texture_mean, col="red")
points(benign$area_mean, benign$texture_mean, col="green")
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"),
pch=1)
plot(malignant$area_mean, malignant$texture_mean, col="red")
points(benign$area_mean, benign$texture_mean, col="green")
legend(2000, 0.09,
c("Malignant", "Benign"),
col=c("red", "green"),
pch=1)
